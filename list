
#include<iostream>
using namespace std;

// Sudoko
bool check(int arr[100][100],int n,int x,int y,int value){
    for(int i=x,j=y+1;j<9;j++){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x,j=y-1;j>=0;j--){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x+1,j=y;i<9;i++){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x-1,j=y;i>=0;i--){
        if(arr[i][j]==value){
            return false;
        }
    }
    int x1=3*(x/3);
    int y1=3*(y/3);
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(arr[x1+i][y1+j]==value){
                return false;
            }
        }
    }
    return true;
}

bool sudoko(int arr[100][100],int n,int x,int y){
    if(y==n && x==n-1){
        cout<<"*****************"<<endl;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cout<<arr[i][j];
            }
            cout<<endl;
        }
        cout<<"*****************"<<endl;
        return true;
    }
    if(y==n){
        x++;
        y=0;
    }

    if(arr[x][y]==0){
        for(int k=1;k<10;k++){
            if(check(arr,n,x,y,k)){
                arr[x][y] = k;
                bool done = sudoko(arr,n,x,y+1);
                if(done){
                    return true;
                }
                arr[x][y] = 0;
            }
        }
    }else{
        return sudoko(arr,n,x,y+1);
    }
    return false;
}

int main(){
int grid[100][100] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
                      {5, 2, 0, 0, 0, 0, 0, 0, 0},
                      {0, 8, 7, 0, 0, 0, 0, 3, 1},
                      {0, 0, 3, 0, 1, 0, 0, 8, 0},
                      {9, 0, 0, 8, 6, 3, 0, 0, 5},
                      {0, 5, 0, 0, 9, 0, 6, 0, 0},
                      {1, 3, 0, 0, 0, 0, 2, 5, 0},
                      {0, 0, 0, 0, 0, 0, 0, 7, 4},
                      {0, 0, 5, 2, 0, 6, 3, 0, 0}};
cout<<sudoko(grid,9,0,0)<<endl;
}


#include<iostream>
using namespace std;
struct node{
    int data;
    node * next;
    node(int data){
        this->data = data;
        next = NULL;
    }
};
node* createll(){
    cout<<"Enter data and -1 to exit"<<endl;
    int data;
    cin>>data;
    node * head;
    if(data!=-1){
        head = new node(data);
    }
    node * it = head;
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = it->next;
        cin>>data;
    }
    return head;
}

void createll2(node ** head){
    cout<<"Enter data and -1 to exit"<<endl;
    int data;
    cin>>data;
    if(data!=-1){
        node * temp = new node(data);
        *head = temp;
    }
    node * it = *head;
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = it->next;
        cin>>data;
    }
    return;
}

void createll3(node* head){
    cout<<"Enter data and -1 to exit"<<endl;
    int data;
    cin>>data;
    if(data!=-1){
        head = new node(data);
    }
    node * it = head;
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = it->next;
        cin>>data;
    }
    return;
}

void print(node * head){
    while(head){
        cout<<head->data<<"-->";
        head = head->next;
    }
    cout<<"NULL"<<endl;
}
int main(){
//node * head = createll();

//node * head = 0;
//createll2(&head);
node * head = 0;
createll3(head);
print(head);
}










#include<iostream>
using namespace std;
struct node{
    int data;
    node * next;

    node(int data){
        this->data = data;
        this->next = NULL;
    }
};
node * create_linklist(){
    cout<<"Input value, and -1 to exit ";
    int data;
    cin>>data;
    node * it;
    node * root;
    if(data!=-1){
      root = new node(data);
      it = root;
    }
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = temp;
        cin>>data;
    }
    return root;
}
void create_linklist(node *& root){
    cout<<"Input value, and -1 to exit ";
    int data;
    cin>>data;
    node * it;
    //node * root;
    if(data!=-1){
      node * temp = new node(data);
      root = temp;
      it = root;
    }
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = temp;
        cin>>data;
    }
    return;
}
node * reverse_ll(node * head,node *&newhead){
    if(head==NULL){
        return NULL;
    }
    if(head->next==NULL){
        newhead = head;
        return head;
    }
    node * curr_head = reverse_ll(head->next,newhead);
    curr_head->next = head;
    head->next = NULL;
    return head;
}

pair<node*,node*> reverse_ll2(node * head){
    if(!head){
        pair<node *,node*>p;
        p.first = p.second = NULL;
        return p;
    }
    if(head->next==NULL){
        pair<node*,node*>p;
        p.first = head;
        p.second = head;
        return p;
    }
    pair<node*, node*> p  = reverse_ll2(head->next);
    p.second->next = head;
    p.second = head;
    p.second->next = NULL;
    return p;
}

node * itterative_reversell(node * head){
    node * curr;
    curr = head;
    head = head->next;
    curr->next = NULL;
    while(head!=NULL){
        node * temp = head->next;
        head->next = curr;
        curr = head;
        head = temp;
    }
    return curr;
}
void print(node * root){
    while(root){
        cout<<root->data<<"-->";
        root = root->next;
    }
    cout<<"NULL"<<endl;
}
int main(){
    node * root = NULL;
    create_linklist(root);
    print(root);
    node * newroot = NULL;
    pair<node*,node*>p;
    newroot = itterative_reversell(root);
    print(newroot);
}
