#include<iostream>
using namespace std;
struct node{
    int data;
    node * next;

    node(int data){
        this->data = data;
        this->next = NULL;
    }
};
node * create_linklist(){
    cout<<"Input value, and -1 to exit ";
    int data;
    cin>>data;
    node * it;
    node * root;
    if(data!=-1){
      root = new node(data);
      it = root;
    }
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = temp;
        cin>>data;
    }
    return root;
}
void create_linklist(node *& root){
    cout<<"Input value, and -1 to exit ";
    int data;
    cin>>data;
    node * it;
    //node * root;
    if(data!=-1){
      node * temp = new node(data);
      root = temp;
      it = root;
    }
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = temp;
        cin>>data;
    }
    return;
}
node * reverse_ll(node * head,node *&newhead){
    if(head==NULL){
        return NULL;
    }
    if(head->next==NULL){
        newhead = head;
        return head;
    }
    node * curr_head = reverse_ll(head->next,newhead);
    curr_head->next = head;
    head->next = NULL;
    return head;
}

pair<node*,node*> reverse_ll2(node * head){
    if(!head){
        pair<node *,node*>p;
        p.first = p.second = NULL;
        return p;
    }
    if(head->next==NULL){
        pair<node*,node*>p;
        p.first = head;
        p.second = head;
        return p;
    }
    pair<node*, node*> p  = reverse_ll2(head->next);
    p.second->next = head;
    p.second = head;
    p.second->next = NULL;
    return p;
}

node * itterative_reversell(node * head){
    node * curr;
    curr = head;
    head = head->next;
    curr->next = NULL;
    while(head!=NULL){
        node * temp = head->next;
        head->next = curr;
        curr = head;
        head = temp;
    }
    return curr;
}
void print(node * root){
    while(root){
        cout<<root->data<<"-->";
        root = root->next;
    }
    cout<<"NULL"<<endl;
}
int main(){
    node * root = NULL;
    create_linklist(root);
    print(root);
    node * newroot = NULL;
    pair<node*,node*>p;
    newroot = itterative_reversell(root);
    print(newroot);
}
