
#include<iostream>
using namespace std;
int factorial(int n){
    if(n==0||n==1){
        return 1;
    }
    cout<<n<<endl;
    return n*factorial(n-1);
}
int fibo(int n){
    if(n==0){
        return 0;
    }
    if(n==1){
        return 1;
    }
    int a = fibo(n-2);
    int b = fibo(n-1);
    return a+b;
}
bool check_sorted(int arr[10],int n){
    if(n==0 || n==1){
        return true;
    }
    bool is_sorted = check_sorted(arr,n-1);
    if(is_sorted && arr[n-2]<=arr[n-1]){
        cout<<arr[n-2]<<" "<<arr[n-1]<<endl;
        return true;
    }else{
        return false;
    }
}

int sum_array(int arr[10],int n){
    if(n==1){
        return arr[n-1];
    }
    int sum = sum_array(arr,n-1);
    int current = arr[n-1];
    return sum+current;
}

void selection_sort(int arr[10],int n,int index){
    if(index>=n){
        return;
    }
    int min = arr[index];
    int min_index = index;
    for(int i=index+1;i<n;i++){
        if(arr[i]<min){
            min = arr[i];
            min_index = i;
        }
    }
    arr[min_index] = arr[index];
    arr[index] = min;
    selection_sort(arr,n,index+1);
    return;
}
void print_inc(int n){
    if(n<1){
        return;
    }
    print_inc(n-1);
    cout<<n<<endl;
    return;
}
void print_dec(int n){
    if(n<1){
        return;
    }
    cout<<n<<endl;
    print_dec(n-1);
    return;
}
bool check_7(int n){
    if(n<=0){
        return false;
    }
    int x = n%10;
    if(x==7){
        return true;
    }else{
        return check_7(n/10);
    }
}

void bubble_sort(int arr[10],int n,int i,int j){
    if(j>=n-i-1){
        return;
    }
    if(arr[j]>arr[j+1]){
        int temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = arr[j];
    }
    for(int i=0;i<n;i++){
        bubble_sort(arr,n,i,j+1);
    }
}

int str_to_int(char arr[100],int index){
    static int curr = 0;
    if(!arr[index]){
        return curr;
    }
    int k = arr[index] - 48;
    curr = curr*10+k;
    return str_to_int(arr,index+1);


}

bool binary_search(int arr[10],int start,int end,int k){
    if(start>end){
        return false;
    }
    int mid = (start+end)/2;
    if(arr[mid]==k){
        return true;
    }
    else if(arr[mid]>k){
        end = mid-1;
    }else{
        start = mid+1;
    }
    return binary_search(arr,start,end,k);
}

// mergesort
void merge(int arr[10],int start,int mid,int end){
    int temp[100];
    int index = start;
    int start2 = mid+1;
    while(start<=mid && start2<=end){
        if(arr[start]<arr[start2]){
            temp[index++] = arr[start++];
        }else{
            temp[index++] = arr[start2++];
        }
    }
    while(start<=mid){
        temp[index++] = arr[start++];
    }
    while(start2<=end){
        temp[index++] = arr[start2++];
    }
    for(int i=0;i<=end;i++){
        arr[i] = temp[i];
    }
}

void merge_sort(int arr[10],int start,int end){
    if(start>=end){
        return;
    }
    int mid = (start+end)/2;
    merge_sort(arr,start,mid);
    merge_sort(arr,mid+1,end);
    merge(arr,start,mid,end);
    return;
}

//print all sub sequence
void print_subsequence(int input[10],int n,int output[10],int outputIndex,int inputIndex){
    if(inputIndex>=n){
        for(int i=0;i<outputIndex;i++){
            cout<<output[i]<<" ";
        }
        cout<<endl;
        return;
    }
    output[outputIndex] = input[inputIndex];
    print_subsequence(input,n,output,outputIndex+1,inputIndex+1);
    print_subsequence(input,n,output,outputIndex,inputIndex+1);
    return;
}
// permutation
void permute(char arr[100],int i){
    if(arr[i]=='\0'){
        cout<<arr<<endl;
    }
    for(int j=i;arr[j]!='\0';j++){
        swap(arr[i],arr[j]);
        permute(arr,i+1);
        swap(arr[i],arr[j]);
    }
}
// quick_sort
// nqueens
bool is_safe(int arr[100][100],int n,int x,int y){
    for(int i=x+1,j=y;i<n;i++){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x-1,j=y;i>=0;i--){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x,j=y+1;j<n;j++){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x,j=y-1;j>=0;j--){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x-1,j=y+1;i>=0 && j<n;i--,j++){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x+1,j=y+1;i<n && j<n;i++,j++){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x+1,j=y-1;i<n && j>=0;i++,j--){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x-1,j=y-1;i>=0 && j>=0;i--,j--){
        if(arr[i][j]){
            return false;
        }
    }
    return true;
}

int nqueens(int arr[100][100],int n,int x,int y){
    if(y==n){
        cout<<"*****************"<<endl;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cout<<arr[i][j];
            }
            cout<<endl;
        }
        cout<<"*****************"<<endl;
        return 1;
    }
    int sum=0;
    for(int i=0;i<n;i++){
        if(is_safe(arr,n,i,y)){
            arr[i][y] = 1;
            sum+=nqueens(arr,n,0,y+1);
            arr[i][y] = 0;
        }
    }
    return sum;
}
// Sudoko
bool check(int arr[100][100],int n,int x,int y,int value){
    for(int i=x,j=y+1;j<9;j++){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x,j=y-1;j>=0;j--){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x+1,j=y;i<9;i++){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x-1,j=y;i>=0;i--){
        if(arr[i][j]==value){
            return false;
        }
    }
    int x1=3*(x/3);
    int y1=3*(y/3);
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(arr[x1+i][y1+j]==value){
                return false;
            }
        }
    }
    return true;
}

bool sudoko(int arr[100][100],int n,int x,int y){
    if(y==n && x==n-1){
        cout<<"*****************"<<endl;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cout<<arr[i][j];
            }
            cout<<endl;
        }
        cout<<"*****************"<<endl;
        return true;
    }
    if(y==n){
        x++;
        y=0;
    }

    if(arr[x][y]==0){
        for(int k=1;k<10;k++){
            if(check(arr,n,x,y,k)){
                arr[x][y] = k;
                bool done = sudoko(arr,n,x,y+1);
                if(done){
                    return true;
                }
                arr[x][y] = 0;
            }
        }
    }else{
        return sudoko(arr,n,x,y+1);
    }
    return false;
}

int main(){
int grid[100][100] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
                      {5, 2, 0, 0, 0, 0, 0, 0, 0},
                      {0, 8, 7, 0, 0, 0, 0, 3, 1},
                      {0, 0, 3, 0, 1, 0, 0, 8, 0},
                      {9, 0, 0, 8, 6, 3, 0, 0, 5},
                      {0, 5, 0, 0, 9, 0, 6, 0, 0},
                      {1, 3, 0, 0, 0, 0, 2, 5, 0},
                      {0, 0, 0, 0, 0, 0, 0, 7, 4},
                      {0, 0, 5, 2, 0, 6, 3, 0, 0}};
cout<<sudoko(grid,9,0,0)<<endl;

/*
int arr[100][100] = {0};
cout<<nqueens(arr,3,0,0);
//int arr[10] = {1,2,3,4,5};
int temp[10] = {0};

cout<<check_sorted(arr,5)<<endl;
cout<<sum_array(arr,5)<<endl;
selection_sort(arr,5,0);
for(int i=0;i<5;i++){
    cout<<arr[i]<<" ";
}
print_inc(10);
print_dec(10);
*/
//cout<<check_7(3724085)<<endl;
//cout<<str_to_int("160923",0)<<endl;

/*
merge_sort(arr,0,4);
for(int i=0;i<5;i++){
    cout<<arr[i]<<" ";
}*/

//print_subsequence(arr,5,temp,0,0);
char arr1[10] = "abc";
//permute(arr1,0);
}













#include<iostream>
using namespace std;
struct node{
    int data;
    node * next;

    node(int data){
        this->data = data;
        this->next = NULL;
    }
};
node * create_linklist(){
    cout<<"Input value, and -1 to exit ";
    int data;
    cin>>data;
    node * it;
    node * root;
    if(data!=-1){
      root = new node(data);
      it = root;
    }
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = temp;
        cin>>data;
    }
    return root;
}
void create_linklist(node *& root){
    cout<<"Input value, and -1 to exit ";
    int data;
    cin>>data;
    node * it;
    //node * root;
    if(data!=-1){
      node * temp = new node(data);
      root = temp;
      it = root;
    }
    cin>>data;
    while(data!=-1){
        node * temp = new node(data);
        it->next = temp;
        it = temp;
        cin>>data;
    }
    return;
}
node * reverse_ll(node * head,node *&newhead){
    if(head==NULL){
        return NULL;
    }
    if(head->next==NULL){
        newhead = head;
        return head;
    }
    node * curr_head = reverse_ll(head->next,newhead);
    curr_head->next = head;
    head->next = NULL;
    return head;
}

pair<node*,node*> reverse_ll2(node * head){
    if(!head){
        pair<node *,node*>p;
        p.first = p.second = NULL;
        return p;
    }
    if(head->next==NULL){
        pair<node*,node*>p;
        p.first = head;
        p.second = head;
        return p;
    }
    pair<node*, node*> p  = reverse_ll2(head->next);
    p.second->next = head;
    p.second = head;
    p.second->next = NULL;
    return p;
}

node * itterative_reversell(node * head){
    node * curr;
    curr = head;
    head = head->next;
    curr->next = NULL;
    while(head!=NULL){
        node * temp = head->next;
        head->next = curr;
        curr = head;
        head = temp;
    }
    return curr;
}
void print(node * root){
    while(root){
        cout<<root->data<<"-->";
        root = root->next;
    }
    cout<<"NULL"<<endl;
}
int main(){
    node * root = NULL;
    create_linklist(root);
    print(root);
    node * newroot = NULL;
    pair<node*,node*>p;
    newroot = itterative_reversell(root);
    print(newroot);
}
