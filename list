
#include<iostream>
using namespace std;
// how my original problem depends on smaller problem

// this function magically gives n's factorical
int factorial(int n){
    if(n==1){
        return 1;
    }
    return n*factorial(n-1);
}
// this function magically returns the nth fibo number
int fibo(int n){
    if(n==1){
        return 0;
    }
    if(n==2){
        return 1;
    }
    int a = fibo(n-2);
    int b = fibo(n-1);
    int c = a+b;
    return c;
}

// this function magically checks whether an array is sorted or not starting an index
bool check_sorted(int arr[100],int n,int index){
    if(index==n-1){
        return true;
    }
    bool right = check_sorted(arr,n,index+1);
    if(right && arr[index]<=arr[index+1]){
        return true;
    }
    return false;
}

//this functions magically calculates sum of an array starting from an index
int sum_array(int arr[100],int n,int index){
    if(index==n-1){
        return arr[index];
    }
    int right = sum_array(arr,n,index+1);
    int curr_value = arr[index];
    return curr_value+right;
}

//this function will magically put min at index
void selection_sort(int arr[100],int n,int index){
    if(index==n){
        return;
    }
    int min = arr[index];
    int min_index = index;
    for(int i=index+1;i<n;i++){
        if(arr[i]<min){
            min = arr[i];
            min_index = i;
        }
    }
    arr[min_index] = arr[index];
    arr[index] = min;
    selection_sort(arr,n,index+1);
}

// this function magically print in from 1 to n
void print_inc_order(int n){
    if(n==0){
        return;
    }
    print_inc_order(n-1);
    cout<<n<<" ";
}

// this function magically print in from n to 1
void print_dec_order(int n){
    if(n==0){
        return;
    }
    cout<<n<<" ";
    print_dec_order(n-1);
    return;
}

//this function magically gives x^n;
int power(int x,int n){
    if(n==0){
        return 1;
    }
    return power(x,n-1)*x;
}

void print_digit(int n){
    switch (n){
        case 0:
            cout<<"zero"<<" ";
            break;
        case 1:
            cout<<"one"<<" ";
            break;
        case 2:
            cout<<"two"<<" ";
            break;
        case 3:
            cout<<"three"<<" ";
            break;
        case 4:
            cout<<"four"<<" ";
            break;
        case 5:
            cout<<"five"<<" ";
            break;
        case 6:
            cout<<"six"<<" ";
            break;
        case 7:
            cout<<"seven"<<" ";
            break;
        case 8:
            cout<<"eight"<<" ";
            break;
        case 9:
            cout<<"nine"<<" ";
            break;
    }
    return;
}
void print_number(int n){
    if(n==0){
        return;
    }
    print_number(n/10);
    print_digit(n%10);
    return;
}

bool check_7(int arr[100],int n,int index){
    if(index==n){
        return false;
    }
    if(arr[index]==7){
        return true;
    }
    return check_7(arr,n,index+1);
}

int first_index_7(int arr[100],int n,int index){
    if(index==n){
        return -1;
    }
    if(arr[index]==7){
        return index;
    }
    return first_index_7(arr,n,index+1);
}

int last_index_7(int arr[100],int n,int index){
    if(index==n){
        return -1;
    }
    int i = last_index_7(arr,n,index+1);
    if(i!=-1){
        return i;
    }
    if(arr[index]==7){
        return index;
    }
    return -1;
}
void all_index_7(int arr[100],int n,int index){
    if(index==n){
        return;
    }
    if(arr[index]==7){
        cout<<index<<" ";
    }
    all_index_7(arr,n,index+1);
    return;
}

int multiply(int a,int b){
    if(a==0 || b==0){
        return 0;
    }
    if(a==1){
        return b;
    }
    return multiply(a-1,b) + b;
}

void bubble_sort(int arr[10],int n,int i,int j){
    if(j>=n-i-1){
        return;
    }
    if(arr[j]>arr[j+1]){
        int temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = arr[j];
    }
    for(int i=0;i<n;i++){
        bubble_sort(arr,n,i,j+1);
    }
}

void bubble_sort(int arr[100],int n,int index){
    if(n==0 || n==1){
        return;
    }
    if(index==n-1){
        bubble_sort(arr,n-1,0);
        return;
    }
    if(arr[index]>arr[index+1]){
        int temp = arr[index];
        arr[index] = arr[index+1];
        arr[index+1] = temp;
    }
    bubble_sort(arr,n,index+1);
    return;
}

bool binary_search(int arr[100],int start,int end,int k){
    int mid = (start+end)/2;
    if(start>end){
        return false;
    }
    if(arr[mid]==k){
        return true;
    }
    if(arr[mid]>k){
        return binary_search(arr,start,mid-1,k);
    }else{
        return binary_search(arr,mid+1,end,k);
    }
}

int str_to_int(char arr[100],int index,int num){
    if(arr[index]=='\0'){
        return num;
    }
    int x = arr[index]-48;
    num = num*10 + x;
    return str_to_int(arr,index+1,num);
}

int sti(char arr[100]){
    if(arr[0]=='\0'){
        return 0;
    }
    int n = strlen(arr);
    int l = arr[n-1] - 48;
    arr[n-1] = '\0';
    int left = sti(arr);
    return left*10 + l;
}

void merge(int arr[100],int start1,int start2,int end){
    int s = start1;
    int m = start2-1;
    int n = end;
    int k = 0;
    int temp[100];
    while(start1<=m && start2<=n){
        if(arr[start1]<arr[start2]){
            temp[k++] = arr[start1++];
        }else{
            temp[k++] = arr[start2++];
        }
    }
    while(start1<=m){
        temp[k++] = arr[start1++];
    }
    while(start2<=n){
        temp[k++] = arr[start2++];
    }
    for(int i=0;i<k;i++){
        arr[s++] = temp[i];
    }
}

void merge_sort(int arr[100],int start,int end){
    if(start>=end){
        return;
    }
    int mid = (start+end)/2;
    merge_sort(arr,start,mid);
    merge_sort(arr,mid+1,end);
    merge(arr,start,mid+1,end);
    return;
}

//tower of hanoi
void toh(int n,char source,char dest,char helper){
    if(n==1){
        cout<<source<<"-->"<<dest<<endl;
        return;
    }
    toh(n-1,source,helper,dest);
    cout<<source<<"-->"<<dest<<endl;
    toh(n-1,helper,dest,source);
    return;
}

// permutation
void permute(char arr[100],int i){
    if(arr[i]=='\0'){
        cout<<arr<<endl;
    }
    for(int j=i;arr[j]!='\0';j++){
        swap(arr[i],arr[j]);
        permute(arr,i+1);
        swap(arr[i],arr[j]);
    }
}
//print all sub sequence
void print_subsequence(int input[10],int n,int output[10],int outputIndex,int inputIndex){
    if(inputIndex>=n){
        for(int i=0;i<outputIndex;i++){
            cout<<output[i]<<" ";
        }
        cout<<endl;
        return;
    }
    output[outputIndex] = input[inputIndex];
    print_subsequence(input,n,output,outputIndex+1,inputIndex+1);
    print_subsequence(input,n,output,outputIndex,inputIndex+1);
    return;
}

// quick_sort
// nqueens

bool is_safe2(int arr[100][100],int n,int x,int y){
    int check[8][2] = {{1,0},{-1,0},{0,1},{0,-1},{-1,1},{1,1},{1,-1},{-1,-1}};
    for(int l=0;l<8;l++){
        for(int i=x+check[l][0],j=y+check[l][1]; i<n && i>=0 && j<n && j>=0;i+=check[l][0],j+=check[l][1]){
            if(arr[i][j]){
                return false;
            }
        }
    }
    return true;
}
bool is_safe(int arr[100][100],int n,int x,int y){
    for(int i=x+1,j=y;i<n;i++){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x-1,j=y;i>=0;i--){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x,j=y+1;j<n;j++){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x,j=y-1;j>=0;j--){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x-1,j=y+1;i>=0 && j<n;i--,j++){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x+1,j=y+1;i<n && j<n;i++,j++){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x+1,j=y-1;i<n && j>=0;i++,j--){
        if(arr[i][j]){
            return false;
        }
    }
    for(int i=x-1,j=y-1;i>=0 && j>=0;i--,j--){
        if(arr[i][j]){
            return false;
        }
    }
    return true;
}

int nqueens(int arr[100][100],int n,int x,int y){
    if(y==n){
        cout<<"*****************"<<endl;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cout<<arr[i][j]<<" ";
            }
            cout<<endl;
        }
        cout<<"*****************"<<endl;
        //return true;
        return 1;
    }
    int sum=0;
    for(int i=0;i<n;i++){
        if(is_safe2(arr,n,i,y)){
            arr[i][y] = 1;
            sum+=nqueens(arr,n,0,y+1);
            /*bool done = nqueens(arr,n,0,y+1);
            if(done){
                return true;
            }*/
            arr[i][y] = 0;
        }
    }
    //return false;
    return sum;
}
// Sudoko
bool check(int arr[100][100],int n,int x,int y,int value){
    for(int i=x,j=y+1;j<9;j++){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x,j=y-1;j>=0;j--){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x+1,j=y;i<9;i++){
        if(arr[i][j]==value){
            return false;
        }
    }
    for(int i=x-1,j=y;i>=0;i--){
        if(arr[i][j]==value){
            return false;
        }
    }
    int x1=3*(x/3);
    int y1=3*(y/3);
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(arr[x1+i][y1+j]==value){
                return false;
            }
        }
    }
    return true;
}

bool sudoko(int arr[100][100],int n,int x,int y){
    if(y==n && x==n-1){
        cout<<"*****************"<<endl;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cout<<arr[i][j]<<" ";
            }
            cout<<endl;
        }
        cout<<"*****************"<<endl;
        return true;
    }
    if(y==n){
        x++;
        y=0;
    }

    if(arr[x][y]==0){
        for(int k=1;k<10;k++){
            if(check(arr,n,x,y,k)){
                arr[x][y] = k;
                bool done = sudoko(arr,n,x,y+1);
                if(done){
                    return true;
                }
                arr[x][y] = 0;
            }
        }
    }else{
        return sudoko(arr,n,x,y+1);
    }
    return false;
}

int main(){
    int arr[100][100] = {0};
    //cout<<nqueens(arr,8,0,0)<<endl;
int grid[100][100] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
                      {5, 2, 0, 0, 0, 0, 0, 0, 0},
                      {0, 8, 7, 0, 0, 0, 0, 3, 1},
                      {0, 0, 3, 0, 1, 0, 0, 8, 0},
                      {9, 0, 0, 8, 6, 3, 0, 0, 5},
                      {0, 5, 0, 0, 9, 0, 6, 0, 0},
                      {1, 3, 0, 0, 0, 0, 2, 5, 0},
                      {0, 0, 0, 0, 0, 0, 0, 7, 4},
                      {0, 0, 5, 2, 0, 6, 3, 0, 0}};

int mat[100][100] = {{5,3,0,0,7,0,0,0,0},
                {6,0,0,1,9,5,0,0,0},
                {0,9,8,0,0,0,0,6,0},
                {8,0,0,0,6,0,0,0,3},
                {4,0,0,8,0,3,0,0,1},
                {7,0,0,0,2,0,0,0,6},
                {0,6,0,0,0,0,2,8,0},
                {0,0,0,4,1,9,0,0,5},
                {0,0,0,0,8,0,0,7,9}};

cout<<sudoko(mat,9,0,0)<<endl;

mergesort
tower_of_hanoi
subsequence
permutation
nqueens
sudoko

}

